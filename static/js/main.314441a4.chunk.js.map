{"version":3,"sources":["Schedule/Goals.js","Schedule/index.js","App.js","serviceWorker.js","index.js"],"names":["Goals","props","inputField","e","target","name","setState","value","localStorage","setItem","workDay","date","hours","workDays","state","curr","find","console","log","JSON","stringify","update","dayOfWork","sort","a","b","map","className","onChange","type","pattern","addDay","add","preventDefault","push","endGoal","hourlyPrice","nextProps","i","length","currentKey","key","includes","this","split","pop","parse","getItem","open","step","Button","onClick","variant","onSubmit","defaultValue","moment","format","max","varian","React","Component","Schedule","logHours","workList","workday","duration","getDuration","minutes","inMS","_data","days","timeSpent","reduce","acc","Number","earnings","toFixed","App","basename","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.314441a4.chunk.js","sourcesContent":["import React from 'react';\nimport './index.css';\nimport moment from 'moment';\nimport Button from 'react-bootstrap/esm/Button';\n\nclass Goals extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      endGoal: 3000, \n      hourlyPrice: 150,\n      workDays: [],\n      addDay: false, \n    }\n  }\n\n  inputField = (e) => {\n    switch (e.target.name) {\n      case 'hourlyPrice':\n        this.setState({[e.target.name]: e.target.value});\n        localStorage.setItem(`schedule.${e.target.name}`, e.target.value);\n        break;\n      default:\n        const date = e.target.name;\n        const workDay = { date, hours: e.target.value };\n        \n        const { workDays } = this.state;\n        const curr = workDays.find(({date}) => workDay.date === date);\n        console.log(curr, workDay)\n        curr.hours = workDay.hours;\n    \n        this.setState({workDays});\n        localStorage.setItem(`schedule.workDays`, JSON.stringify(workDays));\n        break;\n    }\n    this.props.update();\n  }\n\n  componentDidMount(nextProps) {\n    for(var i =0; i < localStorage.length; i++){\n      const currentKey = localStorage.key(i);\n      if(currentKey.includes('schedule.')) {\n        this.setState({[currentKey.split('schedule.').pop()]: JSON.parse(localStorage.getItem(currentKey))});\n      }\n\n    }\n  }\n\ndayOfWork = () => {\n  const {workDays} = this.state;\n  return workDays.sort((a, b) => a.date - b.date).map(workDay =>(\n    <div className=\"dayofWalk\"> \n      <span>{workDay.date}</span>\n      <input name={workDay.date} onChange={this.inputField} value={workDay.hours} type=\"number\" pattern=\"[0-9]*\" />\n    </div>\n  ));\n}\n\naddDay = () => {\n  this.setState({addDay: !this.state.addDay });\n}\n\nadd = (e)=> {\n  e.preventDefault();\n  const workDay = { date: e.target.date.value, hours: e.target.hours.value };\n\n\n  const { workDays } = this.state;\n  const curr = workDays.find(({date}) => workDay.date === date);\n\n  if (curr) {\n    curr.hours = workDay.hours;\n  } else {\n    workDays.push(workDay);\n\n  }\n\n  this.setState({workDays});\n  localStorage.setItem(`schedule.workDays`, JSON.stringify(workDays));\n  this.addDay();\n}\n\n  render() {\n    return (\n        <div className={`goals ${this.props.open ? 'open': ''}`}>\n          <div>\n            <span>Hourly price</span>\n            <input name={'hourlyPrice'} onChange={this.inputField} value={this.state.hourlyPrice} type=\"number\" pattern=\"[0-9]*\" step=\".01\"/>\n          </div>\n          <hr />\n          <Button onClick={this.addDay} variant=\"success\">Add Day</Button>\n\n          {this.state.addDay ? \n              <form name=\"addDay\" onSubmit={this.add}>\n                <input name='date' defaultValue={moment().format('Y-MM-DD')} max={moment().format('Y-MM-DD')} type=\"date\" />\n                <input name='hours' defaultValue={0} type=\"number\" pattern=\"[0-9]*\" step=\".01\" />\n                <Button type=\"submit\" varian=\"primary\">Add Day</Button>\n              </form>\n            : null\n          }\n          <hr />\n          {this.dayOfWork()}\n        </div>\n    );\n  }\n}\nexport default Goals;\n","import React from 'react';\nimport './index.css';\nimport Button from 'react-bootstrap/Button';\nimport moment from 'moment';\nimport \"holderjs\";\nimport Goals from './Goals';\n\nclass Schedule extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      logHours: false, workDays: [], hourlyPrice: 150,\n    }\n  }\n\n  componentDidMount(nextProps) {\n    this.update();\n  }\n\n  logHours = () => {\n    this.setState({ logHours: !this.state.logHours })\n  }\n\n  getDuration(hours) {\n  const inMS = hours * 60 * 60 * 1000;\n    const duration = moment.duration(inMS)._data;\n    return {\n      ...duration,\n      hours: (duration.days * 24) + duration.hours\n    }\n}\n\n  workList = () => {\n    const {workDays} = this.state;\n    return workDays.map((workday) => {\n      const duration = this.getDuration(workday.hours);\n      return (<div className=\"registeredTime\"> \n        <span>{workday.date}</span>\n        <span>{duration.hours} hours {duration.minutes > 0 ? ` ${duration.minutes} minutes` : null}</span>\n      </div>);\n    })\n  }\n\n  update = () => {\n    for(var i =0; i < localStorage.length; i++){\n      const currentKey = localStorage.key(i);\n      if(currentKey.includes('schedule.')) {\n        this.setState({[currentKey.split('schedule.').pop()]: JSON.parse(localStorage.getItem(currentKey))});\n      }\n    }\n  }\n\n  render() {\n    const {workDays, logHours, hourlyPrice} = this.state;\n    const timeSpent = this.getDuration(workDays.reduce((acc, {hours}) => {\n      return Number(acc) + Number(hours);\n    }, 0));\n\n    const earnings = workDays.reduce((acc, {hours}) => {\n      return Number(acc) + Number(hours);\n    }, 0) * hourlyPrice;\n\n    return (\n      <>\n      <header className=\"schedule\">\n        Time Schedule\n        <Button onClick={this.logHours} variant=\"success\" />\n        </header>\n\n        <main>\n          <Goals open={logHours} update={this.update}/>\n          <div className=\"earnings\">\n            <div>\n              <h1>Time spent</h1>\n              <span>{timeSpent.hours} hours {timeSpent.minutes > 0 ? ` ${timeSpent.minutes} minutes` : null}</span>\n            </div>\n            <div>\n              <h1>Earnings</h1>\n              <span>{Number(earnings).toFixed(2)} kr</span>\n            </div>\n          </div>\n          <div>\n            {this.workList()}\n          </div>\n\n        </main>\n        </>\n    );\n  }\n}\nexport default Schedule;","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n} from \"react-router-dom\";\n\nimport Schedule from \"./Schedule\";\nimport './App.css';\n\n\nexport default function App() {\n  return (\n    <Router basename=\"/\">\n      <div className=\"App\">\n        <Schedule />\n      </div>\n    </Router>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}